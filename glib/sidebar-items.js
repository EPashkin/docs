initSidebarItems({"constant":[["APPLICATION_FLAGS_NONE",""],["APPLICATION_HANDLES_COMMAND_LINE",""],["APPLICATION_HANDLES_OPEN",""],["APPLICATION_IS_LAUNCHER",""],["APPLICATION_IS_SERVICE",""],["APPLICATION_NON_UNIQUE",""],["APPLICATION_SEND_ENVIRONMENT",""]],"enum":[["FileError",""]],"fn":[["get_current_time",""],["idle_add","Adds a closure to be called by the default main loop when it's idle."],["timeout_add","Adds a closure to be called by the default main loop at regular intervals with millisecond granularity."],["timeout_add_seconds","Adds a closure to be called by the default main loop at regular intervals with second granularity."]],"macro":[["glib_boxed_wrapper!","Wrapper implementations for Boxed types. See `glib_wrapper!`."],["glib_object_wrapper!","Wrapper implementations for Object types. See `glib_wrapper!`."],["glib_shared_wrapper!","Wrapper implementations for shared types. See `glib_wrapper!`."],["glib_wrapper!","Defines a wrapper type and implements the appropriate traits."]],"mod":[["boxed","`IMPL` Boxed wrapper implementation."],["error","`Error` binding and helper trait."],["object","`IMPL` Object wrapper implementation and `Object` binding."],["prelude","Traits and essential types inteded for blanket imports."],["shared","`IMPL` Shared (reference counted) wrapper implementation."],["signal","`IMPL` Low level signal support."],["translate","Translation between GLib/GLib-based FFI types and their Rust counterparts."],["types","Runtime type infromation."],["value","`Value` binding and helper traits."],["wrapper","`IMPL` The `glib_wrapper!` macro and miscellaneous wrapper traits."]],"struct":[["AppInfo",""],["ApplicationFlags",""],["CallbackGuard","Unwinding propagation guard. Aborts the process if destroyed while panicking."],["Continue","Continue calling the closure in the future iterations or drop it."],["GTimeVal",""]],"trait":[["AppInfoExt",""]]});