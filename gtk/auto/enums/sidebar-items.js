initSidebarItems({"enum":[["Align","Controls how a widget deals with extra space in a single (x or y) dimension."],["ArrowType","Used to indicate the direction in which an arrow should point."],["BaselinePosition","Whenever a container has some form of natural row it may align children in that row along a common typographical baseline. If the amount of verical space in the row is taller than the total requested height of the baseline-aligned children then it can use a `BaselinePosition` to select where to put the baseline inside the extra availible space."],["BuilderError","Error codes that identify various errors that can occur while using `Builder`."],["ButtonBoxStyle","Used to dictate the style that a `ButtonBox` uses to layout the buttons it contains."],["ButtonsType","Prebuilt sets of buttons for the dialog. If none of these choices are appropriate, simply use `ButtonsType::None` then call `Dialog::add_buttons`."],["CornerType","Specifies which corner a child widget should be placed in when packed into a `ScrolledWindow`. This is effectively the opposite of where the scroll bars are placed."],["CssProviderError","Error codes for `GTK_CSS_PROVIDER_ERROR`."],["CssSectionType","The different types of sections indicate parts of a CSS document as parsed by GTK’s CSS parser. They are oriented towards the CSS Grammar, but may contain extensions."],["DeleteType","See also: `Entry::delete-from-cursor`."],["DirectionType","Focus movement types."],["DragResult","Gives an indication why a drag operation failed. The value can by obtained by connecting to the `Widget::drag-failed` signal."],["EntryIconPosition","Specifies the side of the entry at which an icon is placed."],["EventSequenceState","Describes the state of a `gdk::EventSequence` in a `Gesture`."],["FileChooserAction","Describes whether a `FileChooser` is being used to open existing files or to save to a possibly new file."],["FileChooserConfirmation","Used as a return value of handlers for the `FileChooser::confirm-overwrite` signal of a `FileChooser`. This value determines whether the file chooser will present the stock confirmation dialog, accept the user’s choice of a filename, or let the user choose another filename."],["FileChooserError","These identify the various errors that can occur while calling `FileChooser` functions."],["IconSize","Built-in stock icon sizes."],["IconThemeError","Error codes for `IconTheme` operations."],["IconViewDropPosition","An enum for determining where a dropped item goes."],["ImageType","Describes the image data representation used by a `Image`. If you want to get the image from the widget, you can only get the currently-stored representation. e.g. if the `Image::get_storage_type` returns `ImageType::Pixbuf`, then you can call `Image::get_pixbuf` but not `Image::get_stock`. For empty images, you can request any storage type (call any of the \"get\" functions), but they will all return `None` values."],["InputPurpose","Describes primary purpose of the input widget. This information is useful for on-screen keyboards and similar input methods to decide which keys should be presented to the user."],["Justification","Used for justifying the text inside a `Label` widget. (See also `Alignment`)."],["LevelBarMode","Describes how `LevelBar` contents should be rendered. Note that this enumeration could be extended with additional modes in the future."],["License","The type of license for an application."],["MenuDirectionType","An enumeration representing directional movements within a menu."],["MessageType","The type of message being displayed in the dialog."],["MovementStep",""],["NotebookTab",""],["NumberUpLayout","Used to determine the layout of pages on a sheet when printing multiple pages per sheet."],["Orientation","Represents the orientation of widgets and other objects which can be switched between horizontal and vertical orientation on the fly, like `Toolbar` or `GesturePan`."],["PackDirection","Determines how widgets should be packed inside menubars and menuitems contained in menubars."],["PackType","Represents the packing location `Box` children. (See: `VBox`, `HBox`, and `ButtonBox`)."],["PageOrientation","See also `PrintSettings::set_orientation`."],["PageSet","See also `gtk_print_job_set_page_set`."],["PanDirection","Describes the panning direction of a `GesturePan`"],["PolicyType","Determines how the size should be computed to achieve the one of the visibility mode for the scrollbars."],["PositionType","Describes which edge of a widget a certain feature is positioned at, e.g. the tabs of a `Notebook`, the handle of a `HandleBox` or the label of a `Scale`."],["PrintDuplex","See also `PrintSettings::set_duplex`."],["PrintError","Error codes that identify various errors that can occur while using the GTK+ printing support."],["PrintPages","See also `gtk_print_job_set_pages`"],["PrintQuality","See also `PrintSettings::set_quality`."],["PropagationPhase","Describes the stage at which events are fed into a `EventController`."],["RecentChooserError","These identify the various errors that can occur while calling `RecentChooser` functions."],["RecentManagerError","Error codes for `RecentManager` operations"],["RecentSortType","Used to specify the sorting method to be applyed to the recently used resource list."],["ReliefStyle","Indicated the relief to be drawn around a `Button`."],["ResizeMode",""],["ResponseType","Predefined values for use as response ids in `DialogExt::add_button`. All predefined values are negative, GTK+ leaves positive values for application-defined response ids."],["RevealerTransitionType","These enumeration values describe the possible transitions when the child of a `Revealer` widget is shown or hidden."],["ScrollStep",""],["ScrollType","Scrolling types."],["ScrollablePolicy","Defines the policy to be used in a scrollable widget when updating the scrolled window adjustments in a given orientation."],["SelectionMode","Used to control what selections users are allowed to make."],["SensitivityType","Determines how GTK+ handles the sensitivity of stepper arrows at the end of range widgets."],["ShadowType","Used to change the appearance of an outline typically provided by a `Frame`."],["SizeGroupMode","The mode of the size group determines the directions in which the size group affects the requested sizes of its component widgets."],["SizeRequestMode","Specifies a preference for height-for-width or width-for-height geometry management."],["SortType","Determines the direction of a sort."],["SpinButtonUpdatePolicy","The spin button update policy determines whether the spin button displays values even if they are outside the bounds of its adjustment. See `SpinButton::set_update_policy`."],["SpinType","The values of the `SpinType` enumeration are used to specify the change to make in `SpinButton::spin`."],["StackTransitionType","These enumeration values describe the possible transitions between pages in a `Stack` widget."],["StateType","This type indicates the current state of a widget; the state determines how the widget is drawn. The `StateType` enumeration is also used to identify different colors in a `Style` for drawing, so states can be used for subparts of a widget as well as entire widgets."],["TextDirection","Reading directions for text."],["TextExtendSelection","Granularity types that extend the text selection. Use the `TextView::extend-selection` signal to customize the selection."],["TextWindowType","Used to reference the parts of `TextView`."],["ToolbarStyle","Used to customize the appearance of a `Toolbar`. Note that setting the toolbar style overrides the user’s preferences for the default toolbar style. Note that if the button has only a label set and GTK_TOOLBAR_ICONS is used, the label will be visible, and vice versa."],["TreeViewColumnSizing","The sizing method the column uses to determine its width. Please note that `TreeViewColumnSizing::Autosize` are inefficient for large views, and can make columns appear choppy."],["TreeViewDropPosition","An enum for determining where a dropped row goes."],["TreeViewGridLines","Used to indicate which grid lines to draw in a tree view."],["Unit","See also `PrintSettings::set_paper_width`."],["WidgetHelpType","Kinds of widget-specific help. Used by the ::show-help signal."],["WindowPosition","Window placement can be influenced using this enumeration. Note that using `WindowPosition::CenterAlways` is almost always a bad idea. It won’t necessarily work well with all window managers or on all windowing systems."],["WindowType","A `Window` can be one of these types. Most things you’d consider a “window” should have type `WindowType::Toplevel`; windows with this type are managed by the window manager and have a frame by default (call `WindowExt::set_decorated` to toggle the frame). Windows with type `WindowType::Popup` are ignored by the window manager; window manager keybindings won’t work on them, the window manager won’t decorate the window with a frame, many GTK+ features that rely on the window manager will not work (e.g. resize grips and maximization/minimization). `WindowType::Popup` is used to implement widgets such as `Menu` or tooltips that you normally don’t think of as windows per se. Nearly all windows should be `WindowType::Toplevel`. In particular, do not use `WindowType::Popup` just to turn off the window borders; use `WindowExt::set_decorated` for that."],["WrapMode","Describes a type of line wrapping."]]});